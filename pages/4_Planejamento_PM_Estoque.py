"""
üîß Planejamento PM & Estoque - Vers√£o Final Corrigida
Otimiza√ß√£o de intervalos de manuten√ß√£o preventiva e gest√£o de pe√ßas de reposi√ß√£o
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# ============================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ============================================================================

st.set_page_config(
    page_title="Planejamento PM & Estoque",
    page_icon="üîß",
    layout="wide"
)

# ============================================================================
# FUN√á√ïES DE C√ÅLCULO WEIBULL
# ============================================================================

def calcular_confiabilidade(t, eta, beta):
    """
    Calcula confiabilidade em tempo t usando distribui√ß√£o Weibull
    R(t) = exp(-(t/Œ∑)^Œ≤)
    """
    return np.exp(-((t / eta) ** beta))

def calcular_intervalo_pm(eta, beta, confiabilidade_alvo):
    """
    Calcula intervalo PM para atingir confiabilidade alvo
    t = Œ∑ √ó (-ln(R))^(1/Œ≤)
    """
    if confiabilidade_alvo <= 0 or confiabilidade_alvo >= 1:
        return None
    intervalo = eta * ((-np.log(confiabilidade_alvo)) ** (1 / beta))
    return intervalo

def calcular_mtbf(eta, beta):
    """
    Calcula MTBF usando fun√ß√£o gamma
    MTBF = Œ∑ √ó Œì(1 + 1/Œ≤)
    """
    from scipy.special import gamma
    mtbf = eta * gamma(1 + 1/beta)
    return mtbf

def interpretar_beta(beta):
    """Interpreta o valor de Œ≤ (par√¢metro de forma)"""
    if beta < 1:
        return "‚¨áÔ∏è Mortalidade Infantil", "Falhas decrescem com o tempo"
    elif beta == 1:
        return "‚û°Ô∏è Taxa Constante", "Falhas aleat√≥rias (exponencial)"
    else:
        return "‚¨ÜÔ∏è Desgaste", "Falhas aumentam com o tempo"

# ============================================================================
# FUN√á√ÉO DE PLOTAGEM
# ============================================================================

def plotar_curva_confiabilidade(eta, beta, intervalo_pm, confiabilidade_alvo):
    """Plota curva de confiabilidade com intervalo PM recomendado"""
    
    # Gera pontos para a curva
    t_max = min(eta * 3, intervalo_pm * 2.5)
    t = np.linspace(0, t_max, 500)
    R = calcular_confiabilidade(t, eta, beta)
    
    # Cria o gr√°fico
    fig = go.Figure()
    
    # Curva de confiabilidade
    fig.add_trace(go.Scatter(
        x=t,
        y=R * 100,
        mode='lines',
        name='Confiabilidade',
        line=dict(color='#1f77b4', width=3),
        hovertemplate='<b>Tempo:</b> %{x:.0f}h<br><b>Confiabilidade:</b> %{y:.1f}%<extra></extra>'
    ))
    
    # Linha vertical do intervalo PM
    fig.add_vline(
        x=intervalo_pm,
        line_dash="dash",
        line_color="red",
        line_width=2,
        annotation_text=f"PM Recomendado: {intervalo_pm:.0f}h",
        annotation_position="top"
    )
    
    # Linha horizontal da confiabilidade alvo
    fig.add_hline(
        y=confiabilidade_alvo * 100,
        line_dash="dot",
        line_color="green",
        line_width=2,
        annotation_text=f"Alvo: {confiabilidade_alvo*100:.0f}%",
        annotation_position="left"
    )
    
    # Ponto de intersec√ß√£o
    fig.add_trace(go.Scatter(
        x=[intervalo_pm],
        y=[confiabilidade_alvo * 100],
        mode='markers',
        name='Ponto PM',
        marker=dict(color='red', size=12, symbol='circle'),
        hovertemplate=f'<b>Intervalo PM:</b> {intervalo_pm:.0f}h<br><b>Confiabilidade:</b> {confiabilidade_alvo*100:.0f}%<extra></extra>'
    ))
    
    # Layout
    fig.update_layout(
        title=dict(
            text='Curva de Confiabilidade Weibull',
            font=dict(size=20, color='#2c3e50')
        ),
        xaxis_title='Tempo (horas)',
        yaxis_title='Confiabilidade (%)',
        hovermode='x unified',
        template='plotly_white',
        height=500,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    fig.update_yaxis(range=[0, 105])
    
    return fig

# ============================================================================
# INTERFACE PRINCIPAL
# ============================================================================

st.title("üîß Planejamento PM & Estoque")
st.markdown("*Otimiza√ß√£o de intervalos de manuten√ß√£o preventiva e gest√£o de pe√ßas de reposi√ß√£o*")

# ============================================================================
# DETEC√á√ÉO INTELIGENTE DE DADOS
# ============================================================================

# Lista de poss√≠veis chaves onde os dados Weibull podem estar
possible_keys = [
    'weibull_data',
    'df_weibull', 
    'weibull_results',
    'analise_weibull',
    'resultados_weibull',
    'weibull_por_equipamento',
    'weibull_por_componente'
]

# Procura a chave correta
df_weibull = None
key_encontrada = None

for key in possible_keys:
    if key in st.session_state and st.session_state[key] is not None:
        try:
            temp_df = st.session_state[key]
            # Verifica se tem as colunas necess√°rias
            if isinstance(temp_df, pd.DataFrame):
                # Procura por colunas de identificador
                id_cols = ['identificador', 'equipamento', 'componente', 'item', 'id']
                has_id = any(col in temp_df.columns for col in id_cols)
                
                # Procura por par√¢metros Weibull
                has_eta = any(col in temp_df.columns for col in ['eta', 'Œ∑', 'scale', 'escala'])
                has_beta = any(col in temp_df.columns for col in ['beta', 'Œ≤', 'shape', 'forma'])
                
                if has_id and has_eta and has_beta:
                    df_weibull = temp_df.copy()
                    key_encontrada = key
                    break
        except:
            continue

# Se n√£o encontrou, tenta ver o que tem no session_state
if df_weibull is None:
    st.warning("‚ö†Ô∏è **Nenhum dado Weibull carregado!**")
    
    # Mostra debug info
    with st.expander("üîç Debug: Session State Dispon√≠vel"):
        st.write("**Chaves dispon√≠veis:**")
        for key in st.session_state.keys():
            valor = st.session_state[key]
            if isinstance(valor, pd.DataFrame):
                st.write(f"- `{key}`: DataFrame com {len(valor)} linhas e colunas: {list(valor.columns)}")
            else:
                st.write(f"- `{key}`: {type(valor).__name__}")
    
    st.info("""
    üìã **Para usar esta p√°gina, voc√™ precisa:**
    
    1. Ir para a p√°gina **"Ajuste Weibull UNIFIED"**
    2. Fazer upload dos dados
    3. Executar a an√°lise Weibull
    4. Depois voltar para esta p√°gina
    
    Os dados devem conter as colunas:
    - Identificador (equipamento/componente)
    - `eta` ou `Œ∑` (par√¢metro de escala)
    - `beta` ou `Œ≤` (par√¢metro de forma)
    """)
    st.stop()

# ============================================================================
# NORMALIZA√á√ÉO DE NOMES DE COLUNAS
# ============================================================================

# Identifica a coluna de identificador
id_col = None
for col in ['identificador', 'equipamento', 'componente', 'item', 'id']:
    if col in df_weibull.columns:
        id_col = col
        break

if id_col is None:
    st.error("‚ùå Coluna de identificador n√£o encontrada!")
    st.stop()

# Padroniza nome para 'identificador'
if id_col != 'identificador':
    df_weibull = df_weibull.rename(columns={id_col: 'identificador'})

# Identifica coluna eta
eta_col = None
for col in ['eta', 'Œ∑', 'scale', 'escala']:
    if col in df_weibull.columns:
        eta_col = col
        break

if eta_col and eta_col != 'eta':
    df_weibull = df_weibull.rename(columns={eta_col: 'eta'})

# Identifica coluna beta
beta_col = None
for col in ['beta', 'Œ≤', 'shape', 'forma']:
    if col in df_weibull.columns:
        beta_col = col
        break

if beta_col and beta_col != 'beta':
    df_weibull = df_weibull.rename(columns={beta_col: 'beta'})

# Valida colunas necess√°rias
if 'eta' not in df_weibull.columns or 'beta' not in df_weibull.columns:
    st.error(f"‚ùå **Erro:** Dados n√£o cont√™m par√¢metros Weibull necess√°rios (eta e beta)")
    st.write("**Colunas dispon√≠veis:**", list(df_weibull.columns))
    st.stop()

# Remove registros com valores inv√°lidos
df_weibull = df_weibull[
    (df_weibull['eta'].notna()) & 
    (df_weibull['beta'].notna()) &
    (df_weibull['eta'] > 0) &
    (df_weibull['beta'] > 0)
].copy()

if len(df_weibull) == 0:
    st.error("‚ùå **Erro:** Nenhum registro v√°lido encontrado nos dados Weibull.")
    st.stop()

# ============================================================================
# MENSAGEM DE SUCESSO
# ============================================================================

st.success(f"‚úÖ **Dados Weibull encontrados!** (Fonte: `{key_encontrada}` com {len(df_weibull)} registros)")

# ============================================================================
# TABS
# ============================================================================

tab1, tab2, tab3 = st.tabs([
    "üîß Planejamento PM",
    "üì¶ Gest√£o de Estoque", 
    "üìä An√°lise de Cen√°rios"
])

# ============================================================================
# TAB 1: PLANEJAMENTO PM
# ============================================================================

with tab1:
    st.header("üîß Planejamento de Manuten√ß√£o Preventiva")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("‚öôÔ∏è Par√¢metros")
        
        # Sele√ß√£o de equipamento/componente
        identificador_selecionado = st.selectbox(
            "Selecione o Equipamento/Componente:",
            options=sorted(df_weibull['identificador'].unique()),
            help="Escolha o equipamento ou componente para calcular o intervalo PM"
        )
        
        # Filtra dados do equipamento selecionado
        registro = df_weibull[df_weibull['identificador'] == identificador_selecionado].iloc[0]
        
        eta = registro['eta']
        beta = registro['beta']
        
        # Exibe par√¢metros Weibull
        st.markdown("---")
        st.markdown("**üìä Par√¢metros Weibull:**")
        
        param_col1, param_col2 = st.columns(2)
        with param_col1:
            st.metric("Œ∑ (Escala)", f"{eta:.1f}h", help="Tempo caracter√≠stico")
        with param_col2:
            st.metric("Œ≤ (Forma)", f"{beta:.2f}", help="Comportamento da falha")
        
        # Interpreta beta
        tipo_falha, descricao = interpretar_beta(beta)
        st.info(f"**{tipo_falha}**\n\n{descricao}")
        
        # MTBF
        mtbf = calcular_mtbf(eta, beta)
        st.metric("MTBF", f"{mtbf:.1f}h", help="Mean Time Between Failures")
        
        st.markdown("---")
        
        # N√≠vel de confiabilidade desejado
        confiabilidade_alvo = st.slider(
            "N√≠vel de Confiabilidade Alvo:",
            min_value=0.80,
            max_value=0.99,
            value=0.90,
            step=0.01,
            format="%.0f%%",
            help="Define o n√≠vel m√≠nimo de confiabilidade desejado"
        ) 
        
        # Calcula intervalo PM
        intervalo_pm = calcular_intervalo_pm(eta, beta, confiabilidade_alvo)
        
        st.markdown("---")
        
        # Resultado principal
        st.markdown("### üéØ **Resultado:**")
        st.metric(
            label="Intervalo PM Recomendado",
            value=f"{intervalo_pm:.0f} horas",
            delta=f"{(intervalo_pm/mtbf - 1)*100:+.1f}% vs MTBF",
            help=f"Executar PM a cada {intervalo_pm:.0f}h garante {confiabilidade_alvo*100:.0f}% de confiabilidade"
        )
        
        # Informa√ß√µes adicionais
        with st.expander("‚ÑπÔ∏è Como Interpretar"):
            st.markdown(f"""
            **Intervalo PM Calculado:** `{intervalo_pm:.0f} horas`
            
            Isso significa que voc√™ deve executar manuten√ß√£o preventiva a cada **{intervalo_pm:.0f} horas** 
            de opera√ß√£o para garantir que o equipamento/componente mantenha pelo menos 
            **{confiabilidade_alvo*100:.0f}% de confiabilidade**.
            
            ---
            
            **Compara√ß√£o com MTBF:**
            - MTBF = {mtbf:.0f}h (tempo m√©dio entre falhas)
            - Intervalo PM = {intervalo_pm:.0f}h
            - Raz√£o PM/MTBF = {intervalo_pm/mtbf:.2f}
            
            {"‚úÖ Intervalo PM **menor** que MTBF = Manuten√ß√£o **proativa**" if intervalo_pm < mtbf else "‚ö†Ô∏è Intervalo PM **maior** que MTBF = Revise a estrat√©gia"}
            
            ---
            
            **F√≥rmula Utilizada:**
            ```
            t_PM = Œ∑ √ó (-ln(R))^(1/Œ≤)
            ```
            Onde:
            - t_PM = Intervalo PM
            - Œ∑ = {eta:.1f} (par√¢metro de escala)
            - Œ≤ = {beta:.2f} (par√¢metro de forma)
            - R = {confiabilidade_alvo:.2f} (confiabilidade alvo)
            """)
    
    with col2:
        st.subheader("üìà An√°lise Gr√°fica")
        
        # Plota curva de confiabilidade
        fig = plotar_curva_confiabilidade(eta, beta, intervalo_pm, confiabilidade_alvo)
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela de intervalos para diferentes confiabilidades
        st.markdown("---")
        st.markdown("### üìã Tabela de Intervalos PM por Confiabilidade")
        
        confs = [0.80, 0.85, 0.90, 0.95, 0.99]
        dados_tabela = []
        
        for conf in confs:
            int_pm = calcular_intervalo_pm(eta, beta, conf)
            conf_no_mtbf = calcular_confiabilidade(mtbf, eta, beta)
            dados_tabela.append({
                'Confiabilidade Alvo': f"{conf*100:.0f}%",
                'Intervalo PM (h)': f"{int_pm:.0f}",
                'Dias (24h/dia)': f"{int_pm/24:.1f}",
                'Raz√£o PM/MTBF': f"{int_pm/mtbf:.2f}",
                'Status': '‚úÖ Recomendado' if conf == confiabilidade_alvo else ''
            })
        
        df_tabela = pd.DataFrame(dados_tabela)
        st.dataframe(df_tabela, use_container_width=True, hide_index=True)
        
        # Recomenda√ß√µes
        st.markdown("---")
        st.markdown("### üí° Recomenda√ß√µes")
        
        if beta < 1:
            st.info("""
            **üîç Mortalidade Infantil Detectada (Œ≤ < 1)**
            
            - Falhas ocorrem mais no in√≠cio da vida √∫til
            - **Recomenda√ß√£o:** Melhore o processo de instala√ß√£o e burn-in
            - Considere per√≠odo de garantia estendido
            """)
        elif beta > 3:
            st.warning("""
            **‚ö†Ô∏è Desgaste Acelerado (Œ≤ > 3)**
            
            - Taxa de falha aumenta rapidamente com o tempo
            - **Recomenda√ß√£o:** Intervalos PM mais curtos s√£o cr√≠ticos
            - Considere substitui√ß√£o preventiva antes do desgaste
            """)
        else:
            st.success("""
            **‚úÖ Comportamento Normal de Desgaste**
            
            - Taxa de falha aumenta gradualmente
            - Intervalos PM calculados s√£o adequados
            - Mantenha registro e monitore a efetividade
            """)

# ============================================================================
# TAB 2: GEST√ÉO DE ESTOQUE
# ============================================================================

with tab2:
    st.header("üì¶ Gest√£o de Estoque de Pe√ßas")
    st.info("üöß **M√≥dulo em desenvolvimento**")
    
    st.markdown("""
    ### Funcionalidades Planejadas:
    
    - üìä C√°lculo de estoque de seguran√ßa
    - üîÑ Pol√≠tica de reposi√ß√£o autom√°tica
    - üí∞ Otimiza√ß√£o de custos de estoque
    - üìà Previs√£o de demanda de pe√ßas
    - üéØ An√°lise ABC de pe√ßas cr√≠ticas
    """)

# ============================================================================
# TAB 3: AN√ÅLISE DE CEN√ÅRIOS
# ============================================================================

with tab3:
    st.header("üìä An√°lise de Cen√°rios")
    st.info("üöß **M√≥dulo em desenvolvimento**")
    
    st.markdown("""
    ### Funcionalidades Planejadas:
    
    - üîÆ Simula√ß√£o What-If
    - üìâ An√°lise de sensibilidade
    - ‚öñÔ∏è Compara√ß√£o de estrat√©gias PM
    - üíµ An√°lise custo-benef√≠cio
    - üé≤ Simula√ß√£o Monte Carlo
    """)

# ============================================================================
# SIDEBAR COM DICAS
# ============================================================================

with st.sidebar:
    st.markdown("---")
    st.markdown("### üí° Dicas")
    
    st.markdown("""
    **Para calcular PM ideal:**
    
    1. Execute an√°lise Weibull primeiro
    2. Defina confiabilidade alvo (geralmente 90%)
    3. Considere custos operacionais
    4. Ajuste baseado em experi√™ncia pr√°tica
    """)
    
    st.markdown("---")
    st.markdown("### üìö Confiabilidade t√≠pica:")
    
    st.markdown("""
    - **Cr√≠tico:** 95-99%
    - **Importante:** 90-95%
    - **Normal:** 80-90%
    """)
    
    st.markdown("---")
    
    # Estat√≠sticas dos dados
    if len(df_weibull) > 0:
        st.markdown("### üìä Estat√≠sticas dos Dados")
        st.metric("Total de Equipamentos/Componentes", len(df_weibull))
        st.metric("Œ≤ M√©dio", f"{df_weibull['beta'].mean():.2f}")
        st.metric("Œ∑ M√©dio", f"{df_weibull['eta'].mean():.1f}h")
        
        # Mostra fonte dos dados
        st.markdown("---")
        st.markdown(f"**üîó Fonte dos dados:**")
        st.code(key_encontrada, language=None)
