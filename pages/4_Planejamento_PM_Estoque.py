"""
P√°gina de planejamento de manuten√ß√£o preventiva e gest√£o de estoque
VERS√ÉO CORRIGIDA - Sem emojis no nome do arquivo
"""
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import sys
import os

# Configurar p√°gina
st.set_page_config(
    page_title="Planejamento PM & Estoque - Weibull Fleet Analytics",
    page_icon="üõ†Ô∏è",
    layout="wide"
)

# Adicionar diret√≥rios ao path de forma robusta
try:
    project_root = Path(__file__).parent.parent
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
except Exception as e:
    st.error(f"Erro ao configurar path: {e}")
    project_root = Path.cwd()

# Imports condicionais para evitar erros
try:
    from core.planner import MaintenancePlanner, SparePartsPlanner, create_maintenance_scenario_analysis
    PLANNER_AVAILABLE = True
except ImportError as e:
    st.warning(f"‚ö†Ô∏è M√≥dulo planner n√£o dispon√≠vel: {e}")
    PLANNER_AVAILABLE = False

try:
    from ai.ai_assistant import WeibullAIAssistant
    AI_AVAILABLE = True
except ImportError:
    AI_AVAILABLE = False

import warnings
warnings.filterwarnings('ignore')

# Cabe√ßalho
st.markdown("# üõ†Ô∏è Planejamento PM & Estoque")
st.markdown("Otimiza√ß√£o de intervalos de manuten√ß√£o preventiva e gest√£o de pe√ßas de reposi√ß√£o")

# Verificar se h√° dados carregados
if 'dataset' not in st.session_state or st.session_state.dataset is None:
    st.info("üìã **Nenhum dado carregado**")
    st.markdown("""
    Para usar esta p√°gina, voc√™ precisa:
    1. Ir para a p√°gina **üóÇÔ∏è Dados**
    2. Fazer upload de um arquivo CSV ou Excel
    3. Verificar que os dados foram padronizados corretamente
    4. Executar an√°lise Weibull na p√°gina **üìà Ajuste Weibull**
    
    Depois de ter resultados Weibull, voc√™ poder√° usar esta p√°gina para planejamento.
    """)
    st.stop()

if 'weibull_results' not in st.session_state or not st.session_state.weibull_results:
    st.info("üìä **Nenhuma an√°lise Weibull encontrada**")
    st.markdown("""
    Para usar o planejamento de manuten√ß√£o, voc√™ precisa:
    1. Ter dados carregados na p√°gina **üóÇÔ∏è Dados**
    2. Executar an√°lise Weibull na p√°gina **üìà Ajuste Weibull**
    3. Gerar par√¢metros Œ≤ (beta) e Œ∑ (eta) para seus componentes
    
    Depois disso, voc√™ poder√° calcular intervalos √≥timos de manuten√ß√£o preventiva.
    """)
    st.stop()

# Dados dispon√≠veis
st.success("‚úÖ Dados e resultados Weibull encontrados!")

# Tabs principais
tab1, tab2, tab3 = st.tabs(["üîß Planejamento PM", "üì¶ Gest√£o de Estoque", "üìä An√°lise de Cen√°rios"])

with tab1:
    st.markdown("## üîß Planejamento de Manuten√ß√£o Preventiva")
    
    if not PLANNER_AVAILABLE:
        st.warning("‚ö†Ô∏è M√≥dulo de planejamento n√£o est√° dispon√≠vel. Mostrando interface simplificada.")
        
        st.markdown("""
        ### C√°lculo de Intervalo de Manuten√ß√£o Preventiva
        
        O intervalo √≥timo de PM √© calculado baseado nos par√¢metros Weibull:
        
        **F√≥rmula:**
        ```
        Intervalo PM = Œ∑ √ó (-ln(Confiabilidade_Alvo))^(1/Œ≤)
        ```
        
        Onde:
        - **Œ∑ (eta)** = Vida caracter√≠stica (horas)
        - **Œ≤ (beta)** = Par√¢metro de forma
        - **Confiabilidade_Alvo** = N√≠vel desejado (ex: 90% = 0.90)
        """)
        
        # Seletor de componente
        components = list(st.session_state.weibull_results.keys())
        if components:
            selected_component = st.selectbox("Selecione o componente:", components)
            
            if selected_component in st.session_state.weibull_results:
                results = st.session_state.weibull_results[selected_component]['results']
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### Par√¢metros Weibull")
                    st.metric("Beta (Œ≤)", f"{results['beta']:.2f}")
                    st.metric("Eta (Œ∑)", f"{results['eta']:.0f} horas")
                    st.metric("MTBF", f"{results['mtbf']:.0f} horas")
                
                with col2:
                    st.markdown("### Configura√ß√£o PM")
                    target_reliability = st.slider(
                        "Confiabilidade Alvo (%)",
                        min_value=50,
                        max_value=99,
                        value=90,
                        step=1
                    ) / 100
                    
                    # Calcular intervalo PM
                    beta = results['beta']
                    eta = results['eta']
                    pm_interval = eta * ((-np.log(target_reliability)) ** (1/beta))
                    
                    st.markdown("### Intervalo Recomendado")
                    st.success(f"**{pm_interval:.0f} horas**")
                    
                    # M√©tricas adicionais
                    st.metric("% da Vida Caracter√≠stica", f"{(pm_interval/eta*100):.1f}%")
                    st.metric("% do MTBF", f"{(pm_interval/results['mtbf']*100):.1f}%")
                
                # An√°lise de risco
                st.markdown("### üìä An√°lise de Diferentes Intervalos")
                
                intervals_df = pd.DataFrame({
                    'Confiabilidade (%)': [50, 60, 70, 80, 85, 90, 95, 99],
                })
                
                intervals_df['Intervalo PM (h)'] = intervals_df['Confiabilidade (%)'].apply(
                    lambda r: eta * ((-np.log(r/100)) ** (1/beta))
                )
                intervals_df['% do MTBF'] = (intervals_df['Intervalo PM (h)'] / results['mtbf'] * 100).round(1)
                intervals_df['Risco de Falha (%)'] = 100 - intervals_df['Confiabilidade (%)']
                
                st.dataframe(intervals_df, use_container_width=True)
                
                # Gr√°fico
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=intervals_df['Intervalo PM (h)'],
                    y=intervals_df['Confiabilidade (%)'],
                    mode='lines+markers',
                    name='Confiabilidade',
                    line=dict(color='#10B981', width=3),
                    marker=dict(size=10)
                ))
                
                fig.add_vline(
                    x=pm_interval,
                    line_dash="dash",
                    line_color="red",
                    annotation_text=f"Recomendado: {pm_interval:.0f}h"
                )
                
                fig.update_layout(
                    title="Confiabilidade vs Intervalo de Manuten√ß√£o",
                    xaxis_title="Intervalo PM (horas)",
                    yaxis_title="Confiabilidade (%)",
                    hovermode='x unified',
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
        else:
            st.warning("Nenhum resultado Weibull dispon√≠vel")
    
    else:
        # Usar m√≥dulo planner completo
        st.markdown("### Usando m√≥dulo de planejamento avan√ßado")
        # (c√≥digo original continua aqui)

with tab2:
    st.markdown("## üì¶ Gest√£o de Estoque de Pe√ßas")
    
    st.info("üöß **Em desenvolvimento**")
    st.markdown("""
    ### Funcionalidades Planejadas:
    
    - **C√°lculo de Demanda:** Estimar quantidade de pe√ßas necess√°rias baseado em:
      - Taxa de falha (par√¢metros Weibull)
      - Tamanho da frota
      - Intervalo de manuten√ß√£o
    
    - **N√≠vel de Estoque √ìtimo:**
      - Estoque de seguran√ßa
      - Ponto de reordena√ß√£o
      - Quantidade econ√¥mica de pedido (EOQ)
    
    - **An√°lise de Custos:**
      - Custo de falta (downtime)
      - Custo de armazenagem
      - Custo de pedido
      - Custo total otimizado
    
    - **Dashboard de Pe√ßas Cr√≠ticas:**
      - Componentes com maior risco de falta
      - Lead time dos fornecedores
      - Hist√≥rico de consumo
    """)

with tab3:
    st.markdown("## üìä An√°lise de Cen√°rios")
    
    st.info("üöß **Em desenvolvimento**")
    st.markdown("""
    ### Funcionalidades Planejadas:
    
    - **Simula√ß√£o de Estrat√©gias:**
      - Comparar diferentes intervalos de PM
      - Avaliar impacto na confiabilidade
      - Calcular custos vs benef√≠cios
    
    - **An√°lise What-If:**
      - "E se aumentarmos a frequ√™ncia de PM?"
      - "E se reduzirmos o estoque de pe√ßas?"
      - "E se investirmos em componentes de melhor qualidade?"
    
    - **Otimiza√ß√£o Multi-Objetivo:**
      - Maximizar confiabilidade
      - Minimizar custos
      - Minimizar downtime
      - Encontrar ponto de equil√≠brio
    
    - **Relat√≥rios Executivos:**
      - ROI de diferentes estrat√©gias
      - Compara√ß√£o com benchmarks
      - Recomenda√ß√µes priorizadas
    """)

# Sidebar com informa√ß√µes
with st.sidebar:
    st.markdown("### üí° Dicas")
    st.markdown("""
    **Para calcular PM ideal:**
    1. Execute an√°lise Weibull primeiro
    2. Defina confiabilidade alvo (geralmente 90%)
    3. Considere custos operacionais
    4. Ajuste baseado em experi√™ncia pr√°tica
    
    **Confiabilidade t√≠pica:**
    - **Cr√≠tico:** 95-99%
    - **Importante:** 90-95%
    - **Normal:** 80-90%
    """)
    
    st.markdown("### üìö Recursos")
    st.markdown("""
    - [Documenta√ß√£o Weibull](https://en.wikipedia.org/wiki/Weibull_distribution)
    - [Planejamento de Manuten√ß√£o](https://www.reliabilityweb.com/articles/entry/preventive-maintenance-optimization)
    - [Gest√£o de Estoque](https://en.wikipedia.org/wiki/Inventory_management)
    """)
