"""
P√°gina principal de an√°lise Weibull - VERS√ÉO UNIFICADA
Trabalha com dados padronizados pelo column_mapper
"""
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import sys


from utils.state_manager import initialize_session_state
initialize_session_state()

# Adicionar diret√≥rios ao path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from core.weibull import WeibullAnalysis, compare_distributions
from ai.ai_assistant import WeibullAIAssistant
import warnings
warnings.filterwarnings('ignore')

st.set_page_config(
    page_title="An√°lise Weibull - Weibull Fleet Analytics",
    page_icon="üìà",
    layout="wide"
)

st.markdown("# üìà An√°lise Weibull")
st.markdown("Ajuste de distribui√ß√£o Weibull e an√°lise de confiabilidade")

# Inicializar session state
if 'weibull_results' not in st.session_state:
    st.session_state.weibull_results = {}
if 'ai_explanations' not in st.session_state:
    st.session_state.ai_explanations = {}


def filter_data_for_analysis(df, fleet=None, component=None, subsystem=None):
    """Filtrar dados para an√°lise"""
    filtered_df = df.copy()
    
    if fleet and fleet != "Todos":
        if 'fleet' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['fleet'] == fleet]
    
    if subsystem and subsystem != "Todos":
        if 'subsystem' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['subsystem'] == subsystem]
    
    if component and component != "Todos":
        if 'component_type' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['component_type'] == component]
    
    return filtered_df


def prepare_weibull_data(df):
    """
    Preparar dados para an√°lise Weibull
    Trabalha com schema padronizado: failure_time, censored
    """
    # Verificar se h√° colunas necess√°rias
    if 'failure_time' not in df.columns:
        return None, None
    
    # Remover valores nulos e negativos
    df_clean = df.dropna(subset=['failure_time'])
    df_clean = df_clean[df_clean['failure_time'] > 0]
    
    if len(df_clean) == 0:
        return None, None
    
    times = df_clean['failure_time'].values
    
    # Pegar coluna censored (j√° deve existir ap√≥s padroniza√ß√£o)
    if 'censored' in df_clean.columns:
        censored = df_clean['censored'].values
    else:
        # Fallback: assumir todas falhas observadas
        censored = np.zeros(len(times), dtype=bool)
    
    return times, censored


def display_weibull_parameters(results):
    """Exibir par√¢metros Weibull em cards"""
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Œ≤ (Forma)", 
            f"{results['beta']:.2f}",
            delta=f"CI: {results['beta_ci_lower']:.2f}-{results['beta_ci_upper']:.2f}"
        )
    
    with col2:
        st.metric(
            "Œ∑ (Escala)", 
            f"{results['eta']:.0f}h",
            delta=f"CI: {results['eta_ci_lower']:.0f}-{results['eta_ci_upper']:.0f}h"
        )
    
    with col3:
        st.metric(
            "MTBF", 
            f"{results['mtbf']:.0f}h",
            delta=f"n={results['sample_size']}"
        )
    
    with col4:
        censoring_pct = results['censoring_rate'] * 100
        st.metric(
            "Taxa de Censura", 
            f"{censoring_pct:.1f}%",
            delta=f"AIC: {results['aic']:.1f}"
        )


def interpret_beta_value(beta):
    """Interpretar valor de beta"""
    if beta < 0.8:
        return "üîµ Falhas Infantis", "Taxa de falha decrescente - problemas de qualidade/instala√ß√£o"
    elif beta < 1.2:
        return "üü° Falhas Aleat√≥rias", "Taxa de falha constante - falhas por acaso"
    elif beta < 3.0:
        return "üî¥ Falhas por Desgaste", "Taxa de falha crescente - desgaste normal"
    else:
        return "üü£ Desgaste Acelerado", "Taxa de falha muito crescente - desgaste severo"


def create_weibull_summary_card(component, results):
    """Criar card resumo da an√°lise"""
    beta_type, beta_desc = interpret_beta_value(results['beta'])
    
    return f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 1.5rem; border-radius: 10px; color: white; margin: 1rem 0;">
        <h3>üîß {component}</h3>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-top: 1rem;">
            <div>
                <strong>Tipo de Falha:</strong><br>
                {beta_type}<br>
                <small>{beta_desc}</small>
            </div>
            <div>
                <strong>Vida Caracter√≠stica:</strong><br>
                {results['eta']:.0f} horas<br>
                <small>63.2% falham at√© este tempo</small>
            </div>
            <div>
                <strong>MTBF:</strong><br>
                {results['mtbf']:.0f} horas<br>
                <small>Tempo m√©dio at√© falha</small>
            </div>
            <div>
                <strong>Qualidade do Ajuste:</strong><br>
                {"‚úÖ Bom" if results.get('convergence', False) else "‚ö†Ô∏è Verificar"}<br>
                <small>AIC: {results['aic']:.1f}</small>
            </div>
        </div>
    </div>
    """


def main():
    # Verificar se h√° dados carregados
    if 'dataset' not in st.session_state or st.session_state.dataset is None:
        st.warning("‚ö†Ô∏è Nenhum dado carregado!")
        st.info("üì• Por favor, v√° para a p√°gina 'üóÇÔ∏è Dados' e carregue um arquivo primeiro.")
        
        # Bot√£o para navegar
        st.markdown("### üëâ Como Proceder:")
        st.markdown("""
        1. Clique em **'üóÇÔ∏è Dados'** no menu lateral
        2. Fa√ßa upload do seu arquivo CSV ou Excel
        3. Aguarde a padroniza√ß√£o autom√°tica
        4. Volte para esta p√°gina para an√°lise
        """)
        return
    
    df = st.session_state.dataset
    
    # Validar que dados est√£o no formato correto
    required_columns = ['component_id', 'component_type', 'failure_time', 'censored']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        st.error(f"‚ùå **Erro de Formato:** Colunas obrigat√≥rias faltando: {', '.join(missing_columns)}")
        st.warning("‚ö†Ô∏è Os dados n√£o est√£o no formato padronizado. Volte para a p√°gina de Dados e recarregue o arquivo.")
        return
    
    # Sidebar com filtros
    with st.sidebar:
        st.markdown("## üéõÔ∏è Filtros de An√°lise")
        
        # Filtro por frota
        frotas_disponiveis = ["Todos"]
        if 'fleet' in df.columns:
            frotas_disponiveis += sorted(df['fleet'].dropna().unique().tolist())
        selected_fleet = st.selectbox("Frota", frotas_disponiveis)
        
        # Filtro por subsistema
        df_filtered = df if selected_fleet == "Todos" else df[df['fleet'] == selected_fleet] if 'fleet' in df.columns else df
        subsistemas_disponiveis = ["Todos"]
        if 'subsystem' in df_filtered.columns:
            subsistemas_disponiveis += sorted(df_filtered['subsystem'].dropna().unique().tolist())
        selected_subsystem = st.selectbox("Subsistema", subsistemas_disponiveis)
        
        # Filtro por componente
        df_filtered = filter_data_for_analysis(df, selected_fleet, None, selected_subsystem)
        componentes_disponiveis = ["Todos"]
        if 'component_type' in df_filtered.columns:
            componentes_disponiveis += sorted(df_filtered['component_type'].dropna().unique().tolist())
        selected_component = st.selectbox("Componente", componentes_disponiveis)
        
        st.markdown("---")
        st.markdown("## ‚öôÔ∏è Configura√ß√µes")
        
        confidence_level = st.slider("N√≠vel de Confian√ßa", 0.8, 0.99, 0.95, 0.01)
        show_individual_points = st.checkbox("Mostrar Pontos Individuais", True)
        show_confidence_bands = st.checkbox("Mostrar Bandas de Confian√ßa", True)
        
        st.markdown("---")
        st.markdown(f"""
        ### üìä Dados Selecionados
        **Frota:** {selected_fleet}  
        **Subsistema:** {selected_subsystem}  
        **Componente:** {selected_component}
        """)
    
    # Filtrar dados
    df_analysis = filter_data_for_analysis(df, selected_fleet, selected_component, selected_subsystem)
    
    if len(df_analysis) == 0:
        st.error("‚ùå Nenhum dado encontrado com os filtros selecionados")
        st.info("üí° Tente ajustar os filtros no menu lateral")
        return
    
    # Preparar dados para Weibull
    times, censored = prepare_weibull_data(df_analysis)
    
    if times is None or len(times) == 0:
        st.error("‚ùå Dados insuficientes para an√°lise Weibull ap√≥s limpeza")
        st.info(f"üìä Registros ap√≥s filtros: {len(df_analysis)}")
        return
    
    # Verificar quantidade m√≠nima de falhas
    n_failures = np.sum(~censored) if censored is not None else len(times)
    
    if n_failures < 3:
        st.error(f"‚ùå Necess√°rio pelo menos 3 falhas observadas. Encontradas: {n_failures}")
        st.info("üí° Tente selecionar um filtro diferente ou usar mais dados")
        return
    
    st.success(f"‚úÖ Dados preparados: {len(times)} registros, {n_failures} falhas observadas")
    
    # Tabs principais
    tab1, tab2, tab3, tab4 = st.tabs(["üéØ Ajuste Principal", "üìä Gr√°ficos", "üîç Compara√ß√£o de Modelos", "ü§ñ An√°lise IA"])
    
    with tab1:
        st.markdown("## üéØ An√°lise Weibull Principal")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            if st.button("üìà Executar An√°lise Weibull", type="primary"):
                with st.spinner("Ajustando distribui√ß√£o Weibull..."):
                    try:
                        # Executar an√°lise
                        weibull = WeibullAnalysis()
                        results = weibull.fit_mle(times, censored)
                        
                        # Salvar resultados
                        analysis_key = f"{selected_fleet}_{selected_subsystem}_{selected_component}"
                        st.session_state.weibull_results[analysis_key] = {
                            'component': selected_component,
                            'results': results,
                            'weibull_obj': weibull,
                            'data': {'times': times, 'censored': censored}
                        }
                        
                        st.success("‚úÖ An√°lise conclu√≠da com sucesso!")
                        
                    except Exception as e:
                        st.error(f"‚ùå Erro na an√°lise: {str(e)}")
                        st.exception(e)
        
        with col2:
            st.markdown("""
            **Sobre a An√°lise:**
            - Ajuste por MLE (Maximum Likelihood)
            - Tratamento autom√°tico de censura
            - Intervalos de confian√ßa
            - Valida√ß√£o de converg√™ncia
            """)
        
        # Exibir resultados se dispon√≠veis
        analysis_key = f"{selected_fleet}_{selected_subsystem}_{selected_component}"
        
        if analysis_key in st.session_state.weibull_results:
            results_data = st.session_state.weibull_results[analysis_key]
            results = results_data['results']
            weibull_obj = results_data['weibull_obj']
            
            st.markdown("---")
            
            # Card resumo
            st.markdown(create_weibull_summary_card(selected_component, results), unsafe_allow_html=True)
            
            # Par√¢metros detalhados
            st.markdown("### üìã Par√¢metros Detalhados")
            display_weibull_parameters(results)
            
            # Interpreta√ß√£o
            st.markdown("### üîç Interpreta√ß√£o")
            
            beta_type, beta_desc = interpret_beta_value(results['beta'])
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"""
                **Tipo de Falha:** {beta_type}
                
                {beta_desc}
                
                **Implica√ß√µes:**
                - Œ≤ = {results['beta']:.2f}
                - {'Manuten√ß√£o preventiva recomendada' if results['beta'] > 1.2 else 'Investigar causas de falha prematura' if results['beta'] < 0.8 else 'Manuten√ß√£o por condi√ß√£o adequada'}
                """)
            
            with col2:
                # Recomenda√ß√µes de manuten√ß√£o
                if results['beta'] > 1.2:  # Desgaste
                    pm_interval_70 = results['eta'] * ((-np.log(0.7))**(1/results['beta']))
                    pm_interval_80 = results['eta'] * ((-np.log(0.8))**(1/results['beta']))
                    
                    st.markdown(f"""
                    **Intervalos de Manuten√ß√£o Sugeridos:**
                    - **Conservador (80% confiabilidade):** {pm_interval_80:.0f}h
                    - **Balanceado (70% confiabilidade):** {pm_interval_70:.0f}h
                    - **Vida caracter√≠stica:** {results['eta']:.0f}h
                    """)
                else:
                    st.markdown("""
                    **Recomenda√ß√µes:**
                    - Investigar causas raiz das falhas
                    - Melhorar controle de qualidade
                    - Considerar manuten√ß√£o por condi√ß√£o
                    """)
    
    with tab2:
        st.markdown("## üìä Gr√°ficos de An√°lise")
        
        if analysis_key in st.session_state.weibull_results:
            results_data = st.session_state.weibull_results[analysis_key]
            weibull_obj = results_data['weibull_obj']
            data = results_data['data']
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üìà Gr√°fico de Probabilidade Weibull")
                try:
                    fig_prob = weibull_obj.create_probability_plot(data['times'], data['censored'])
                    st.plotly_chart(fig_prob, use_container_width=True)
                except Exception as e:
                    st.error(f"Erro ao criar gr√°fico: {str(e)}")
            
            with col2:
                st.markdown("### üìâ Fun√ß√µes de Confiabilidade")
                try:
                    fig_reliability = weibull_obj.create_reliability_curves()
                    st.plotly_chart(fig_reliability, use_container_width=True)
                except Exception as e:
                    st.error(f"Erro ao criar gr√°fico: {str(e)}")
            
            # Gr√°fico de densidade e histograma
            st.markdown("### üìä Distribui√ß√£o dos Dados")
            
            fig_hist = go.Figure()
            
            # Histograma dos dados
            fig_hist.add_trace(go.Histogram(
                x=data['times'][~data['censored']] if data['censored'] is not None else data['times'],
                name='Falhas Observadas',
                opacity=0.7,
                nbinsx=20
            ))
            
            # PDF te√≥rica
            if weibull_obj.fitted:
                x_pdf = np.linspace(min(data['times']), max(data['times']), 100)
                y_pdf = [weibull_obj.pdf(x) for x in x_pdf]
                
                # Normalizar para escala do histograma
                scale_factor = len(data['times']) * (max(data['times']) - min(data['times'])) / 20
                y_pdf_scaled = [y * scale_factor for y in y_pdf]
                
                fig_hist.add_trace(go.Scatter(
                    x=x_pdf,
                    y=y_pdf_scaled,
                    mode='lines',
                    name='PDF Weibull Ajustada',
                    line=dict(color='red', width=2)
                ))
            
            fig_hist.update_layout(
                title='Distribui√ß√£o dos Tempos de Falha',
                xaxis_title='Tempo (horas)',
                yaxis_title='Frequ√™ncia',
                template='plotly_white'
            )
            
            st.plotly_chart(fig_hist, use_container_width=True)
        
        else:
            st.info("üéØ Execute a an√°lise na aba 'Ajuste Principal' primeiro")
    
    with tab3:
        st.markdown("## üîç Compara√ß√£o de Modelos")
        
        if st.button("üîÑ Comparar Distribui√ß√µes", type="secondary"):
            with st.spinner("Comparando modelos..."):
                try:
                    comparison_results = compare_distributions(times, censored)
                    
                    # Criar DataFrame para exibi√ß√£o
                    comparison_df = []
                    for model, results in comparison_results.items():
                        if 'error' not in results:
                            comparison_df.append({
                                'Modelo': model,
                                'AIC': results['aic'],
                                'BIC': results['bic'],
                                'Log-Likelihood': results['log_likelihood'],
                                'MTBF': results['mtbf'],
                                'Par√¢metros': str(results['parameters'])
                            })
                    
                    if comparison_df:
                        df_comparison = pd.DataFrame(comparison_df)
                        df_comparison = df_comparison.sort_values('AIC')  # Menor AIC √© melhor
                        
                        st.markdown("### üìä Compara√ß√£o de Modelos")
                        st.dataframe(df_comparison, use_container_width=True)
                        
                        # Recomenda√ß√£o
                        best_model = df_comparison.iloc[0]['Modelo']
                        st.success(f"‚úÖ **Modelo Recomendado:** {best_model} (menor AIC)")
                        
                        # Gr√°fico de compara√ß√£o AIC
                        fig_aic = px.bar(
                            df_comparison, 
                            x='Modelo', 
                            y='AIC',
                            title='Compara√ß√£o AIC (menor √© melhor)',
                            color='AIC',
                            color_continuous_scale='RdYlGn_r'
                        )
                        st.plotly_chart(fig_aic, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"‚ùå Erro na compara√ß√£o: {str(e)}")
    
    with tab4:
        st.markdown("## ü§ñ An√°lise com IA")
        
        if analysis_key in st.session_state.weibull_results:
            results_data = st.session_state.weibull_results[analysis_key]
            results = results_data['results']
            
            if st.button("üß† Gerar Explica√ß√£o IA", type="primary"):
                with st.spinner("IA analisando resultados..."):
                    try:
                        # Inicializar assistente IA
                        ai_assistant = WeibullAIAssistant()
                        
                        # Gerar explica√ß√£o
                        explanation = ai_assistant.explain_weibull_results(
                            beta=results['beta'],
                            eta=results['eta'],
                            component=selected_component,
                            context={
                                'sample_size': results['sample_size'],
                                'censoring_rate': results['censoring_rate'],
                                'mtbf': results['mtbf'],
                                'fleet': selected_fleet,
                                'subsystem': selected_subsystem
                            }
                        )
                        
                        if explanation.success:
                            st.session_state.ai_explanations[analysis_key] = explanation
                            
                            st.markdown("### ü§ñ Explica√ß√£o da IA")
                            st.markdown(explanation.content)
                            
                            if explanation.suggestions:
                                st.markdown("### üí° Sugest√µes da IA")
                                for suggestion in explanation.suggestions:
                                    st.info(f"üí° {suggestion}")
                        else:
                            st.error(f"‚ùå Erro na an√°lise IA: {explanation.content}")
                    
                    except Exception as e:
                        st.error(f"‚ùå Erro ao chamar IA: {str(e)}")
            
            # Exibir explica√ß√£o salva
            if analysis_key in st.session_state.ai_explanations:
                explanation = st.session_state.ai_explanations[analysis_key]
                
                st.markdown("---")
                st.markdown("### ü§ñ √öltima An√°lise IA")
                
                with st.expander("Ver Explica√ß√£o Completa", expanded=True):
                    st.markdown(explanation.content)
                    
                    if explanation.suggestions:
                        st.markdown("**Sugest√µes:**")
                        for suggestion in explanation.suggestions:
                            st.info(f"üí° {suggestion}")
        
        else:
            st.info("üéØ Execute a an√°lise Weibull primeiro")
    
    # Bot√µes de navega√ß√£o
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚¨ÖÔ∏è Voltar aos Dados"):
            st.info("Use o menu lateral para navegar para 'üóÇÔ∏è Dados'")
    
    with col2:
        if st.button("üíæ Salvar Resultados"):
            if analysis_key in st.session_state.weibull_results:
                results = st.session_state.weibull_results[analysis_key]['results']
                
                # Criar DataFrame com resultados
                results_df = pd.DataFrame([{
                    'Component': selected_component,
                    'Fleet': selected_fleet,
                    'Subsystem': selected_subsystem,
                    'Beta': results['beta'],
                    'Eta': results['eta'],
                    'MTBF': results['mtbf'],
                    'Sample_Size': results['sample_size'],
                    'Censoring_Rate': results['censoring_rate'],
                    'AIC': results['aic'],
                    'BIC': results['bic']
                }])
                
                csv = results_df.to_csv(index=False).encode('utf-8')
                
                st.download_button(
                    label="üì• Download Resultados CSV",
                    data=csv,
                    file_name=f'weibull_results_{selected_component.replace(" ", "_")}.csv',
                    mime='text/csv'
                )
    
    with col3:
        if st.button("‚û°Ô∏è Planejamento PM"):
            st.info("Use o menu lateral para navegar para 'üõ†Ô∏è Planejamento PM & Estoque'")

if __name__ == "__main__":
    main()
