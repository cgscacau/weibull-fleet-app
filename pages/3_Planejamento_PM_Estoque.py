import streamlit as st

st.set_page_config(
    page_title="Planejamento PM & Estoque",
    page_icon="üîß",
    layout="wide"
)

import pandas as pd
import numpy as np
import math
from typing import Dict, Any, Optional, Tuple
import warnings
import sys
from pathlib import Path

warnings.filterwarnings('ignore')

root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from utils.state_manager import (
    initialize_session_state,
    display_pipeline_status, 
    validate_weibull_availability,
    get_available_components
)

from utils.navigation import (
    handle_navigation,
    create_navigation_button
)

# === PROCESSA NAVEGA√á√ÉO ===
handle_navigation()

# === INICIALIZA√á√ÉO ===
initialize_session_state()


# === FUN√á√ïES MATEM√ÅTICAS CORE ===

def weibull_reliability(t: float, lambda_param: float, rho_param: float) -> float:
    """
    Calcula a confiabilidade Weibull: R(t) = exp(-(t/Œª)^œÅ)
    
    Args:
        t: Tempo
        lambda_param: Par√¢metro de escala (Œª)
        rho_param: Par√¢metro de forma (œÅ)
    
    Returns:
        Confiabilidade no tempo t (entre 0 e 1)
    """
    if t <= 0:
        return 1.0
    try:
        return math.exp(-((t / lambda_param) ** rho_param))
    except:
        return 0.0

def weibull_pdf(t: float, lambda_param: float, rho_param: float) -> float:
    """
    Calcula a fun√ß√£o densidade de probabilidade Weibull.
    f(t) = (œÅ/Œª) √ó (t/Œª)^(œÅ-1) √ó exp(-(t/Œª)^œÅ)
    """
    if t <= 0:
        return 0.0
    
    try:
        scale_ratio = t / lambda_param
        return (rho_param / lambda_param) * (scale_ratio ** (rho_param - 1)) * \
               math.exp(-(scale_ratio ** rho_param))
    except:
        return 0.0

def calculate_mtbf_weibull(lambda_param: float, rho_param: float) -> float:
    """
    Calcula MTBF = Œª √ó Œì(1 + 1/œÅ) usando aproxima√ß√£o num√©rica.
    """
    try:
        def gamma_approx(z):
            """Aproxima√ß√£o da fun√ß√£o gama usando s√©rie de Lanczos simplificada."""
            if z == 1:
                return 1.0
            if z < 1:
                return gamma_approx(z + 1) / z
            
            # Aproxima√ß√£o de Stirling melhorada
            return math.sqrt(2 * math.pi / z) * ((z / math.e) ** z) * (1 + 1/(12*z))
        
        gamma_value = gamma_approx(1 + 1/rho_param)
        return lambda_param * gamma_value
    except:
        return lambda_param

def expected_cycle_length_numerical(T: float, lambda_param: float, rho_param: float, 
                                   n_points: int = 1000) -> float:
    """
    Calcula E[min(T, X)] numericamente usando integra√ß√£o trapezoidal.
    E[min(T, X)] = ‚à´‚ÇÄ·µÄ R(t) dt
    """
    if T <= 0:
        return 0.0
    
    try:
        dt = T / n_points
        times = np.linspace(dt, T, n_points)
        reliabilities = [weibull_reliability(t, lambda_param, rho_param) for t in times]
        
        # Integra√ß√£o trapezoidal
        integral = dt * (0.5 * reliabilities[0] + sum(reliabilities[1:-1]) + 0.5 * reliabilities[-1])
        return integral
    except:
        return T * 0.5  # Fallback

def age_replacement_optimization(lambda_param: float, rho_param: float, 
                                cost_pm: float, cost_cm: float, 
                                cost_downtime_pm: float = 0, 
                                cost_downtime_cm: float = 0) -> Dict[str, Any]:
    """
    Otimiza√ß√£o da pol√≠tica de substitui√ß√£o por idade.
    Minimiza: C(T) = [C_PM √ó R(T) + C_CM √ó (1-R(T))] / E[min(T,X)]
    """
    
    # Custos totais
    total_cost_pm = cost_pm + cost_downtime_pm
    total_cost_cm = cost_cm + cost_downtime_cm
    
    def cost_rate_function(T: float) -> float:
        """Taxa de custo por unidade de tempo."""
        if T <= 0:
            return float('inf')
        
        try:
            reliability = weibull_reliability(T, lambda_param, rho_param)
            expected_cycle = expected_cycle_length_numerical(T, lambda_param, rho_param)
            
            if expected_cycle <= 0:
                return float('inf')
            
            numerator = total_cost_pm * reliability + total_cost_cm * (1 - reliability)
            return numerator / expected_cycle
        except:
            return float('inf')
    
    # Busca do intervalo √≥timo usando busca tern√°ria
    mtbf = calculate_mtbf_weibull(lambda_param, rho_param)
    
    # Limites de busca baseados no MTBF
    left = 0.1 * mtbf
    right = 3.0 * mtbf
    
    # Busca tern√°ria para encontrar o m√≠nimo
    tolerance = 1.0
    
    try:
        while (right - left) > tolerance:
            mid1 = left + (right - left) / 3
            mid2 = right - (right - left) / 3
            
            if cost_rate_function(mid1) > cost_rate_function(mid2):
                left = mid1
            else:
                right = mid2
        
        optimal_interval = (left + right) / 2
        optimal_cost_rate = cost_rate_function(optimal_interval)
        reliability_optimal = weibull_reliability(optimal_interval, lambda_param, rho_param)
        
        return {
            "optimal_interval": optimal_interval,
            "optimal_cost_rate": optimal_cost_rate,
            "reliability_at_optimal": reliability_optimal,
            "mtbf": mtbf,
            "success": True
        }
    except Exception as e:
        return {
            "error": str(e),
            "success": False
        }

def calculate_maintenance_scenarios(lambda_param: float, rho_param: float, 
                                  cost_pm: float, cost_cm: float,
                                  cost_downtime_pm: float = 0, 
                                  cost_downtime_cm: float = 0,
                                  hours_per_year: float = 8760) -> pd.DataFrame:
    """
    Gera cen√°rios de manuten√ß√£o para diferentes intervalos.
    """
    mtbf = calculate_mtbf_weibull(lambda_param, rho_param)
    
    # Define intervalos baseados no MTBF
    intervals = np.array([
        0.3 * mtbf,  # Muito conservador
        0.5 * mtbf,  # Conservador  
        0.7 * mtbf,  # Moderado
        1.0 * mtbf,  # MTBF
        1.2 * mtbf,  # Moderado-agressivo
        1.5 * mtbf   # Agressivo
    ])
    
    scenarios = []
    total_cost_pm = cost_pm + cost_downtime_pm
    total_cost_cm = cost_cm + cost_downtime_cm
    
    for interval in intervals:
        try:
            reliability = weibull_reliability(interval, lambda_param, rho_param)
            expected_cycle = expected_cycle_length_numerical(interval, lambda_param, rho_param)
            
            if expected_cycle <= 0:
                continue
            
            # Taxa de custo
            cost_rate = (total_cost_pm * reliability + total_cost_cm * (1 - reliability)) / expected_cycle
            
            # Frequ√™ncias anuais
            cycles_per_year = hours_per_year / expected_cycle
            pm_per_year = reliability * cycles_per_year
            cm_per_year = (1 - reliability) * cycles_per_year
            
            # Custos anuais
            cost_pm_annual = pm_per_year * cost_pm
            cost_cm_annual = cm_per_year * cost_cm
            cost_total_annual = cost_pm_annual + cost_cm_annual
            
            # Classifica√ß√£o de risco
            failure_prob = 1 - reliability
            if failure_prob <= 0.05:
                risk_level = "üü¢ Muito Baixo"
            elif failure_prob <= 0.10:
                risk_level = "üü° Baixo"
            elif failure_prob <= 0.20:
                risk_level = "üü† M√©dio"
            elif failure_prob <= 0.30:
                risk_level = "üî¥ Alto"
            else:
                risk_level = "‚ö´ Muito Alto"
            
            scenarios.append({
                "Intervalo (h)": round(interval, 0),
                "Confiabilidade": round(reliability, 3),
                "Taxa de Custo ($/h)": round(cost_rate, 2),
                "PM por ano": round(pm_per_year, 2),
                "CM por ano": round(cm_per_year, 2),
                "CustoPM/ano": round(cost_pm_annual, 0),
                "CustoCM/ano": round(cost_cm_annual, 0),
                "Custo Total/ano": round(cost_total_annual, 0),
                "N√≠vel de Risco": risk_level
            })
        except:
            continue
    
    return pd.DataFrame(scenarios)

def calculate_inventory_strategy(optimal_interval: float, lambda_param: float, rho_param: float,
                               lead_time_hours: float, service_level: float = 0.95,
                               unit_cost: float = 1000, holding_rate: float = 0.20,
                               ordering_cost: float = 100, 
                               hours_per_year: float = 8760) -> Dict[str, Any]:
    """
    Calcula par√¢metros de gest√£o de estoque baseado na estrat√©gia de manuten√ß√£o.
    """
    
    try:
        # Demanda anual estimada
        reliability = weibull_reliability(optimal_interval, lambda_param, rho_param)
        expected_cycle = expected_cycle_length_numerical(optimal_interval, lambda_param, rho_param)
        
        if expected_cycle <= 0:
            return {"error": "Ciclo esperado inv√°lido", "success": False}
        
        cycles_per_year = hours_per_year / expected_cycle
        pm_per_year = reliability * cycles_per_year
        cm_per_year = (1 - reliability) * cycles_per_year
        
        # Assume 1 pe√ßa por manuten√ß√£o
        annual_demand = pm_per_year + cm_per_year
        
        # Demanda durante lead time
        demand_rate_per_hour = annual_demand / hours_per_year
        mean_demand_lt = demand_rate_per_hour * lead_time_hours
        
        # Z-score para o n√≠vel de servi√ßo
        if service_level >= 0.99:
            z_score = 2.33
        elif service_level >= 0.95:
            z_score = 1.65
        elif service_level >= 0.90:
            z_score = 1.28
        else:
            z_score = 0.84
        
        # Desvio padr√£o (aproxima√ß√£o Poisson)
        std_demand_lt = math.sqrt(mean_demand_lt)
        
        # Estoque de seguran√ßa
        safety_stock = z_score * std_demand_lt
        
        # Ponto de reposi√ß√£o
        reorder_point = mean_demand_lt + safety_stock
        
        # EOQ (Lote Econ√¥mico)
        holding_cost = unit_cost * holding_rate
        if holding_cost > 0 and annual_demand > 0:
            eoq = math.sqrt(2 * annual_demand * ordering_cost / holding_cost)
        else:
            eoq = 1.0
        
        return {
            "annual_demand": round(annual_demand, 2),
            "pm_demand": round(pm_per_year, 2),
            "cm_demand": round(cm_per_year, 2),
            "lead_time_hours": lead_time_hours,
            "mean_demand_lead_time": round(mean_demand_lt, 2),
            "safety_stock": max(1, round(safety_stock, 0)),
            "reorder_point": max(1, round(reorder_point, 0)),
            "economic_order_quantity": max(1, round(eoq, 0)),
            "service_level": service_level,
            "unit_cost": unit_cost,
            "annual_holding_cost": round(safety_stock * holding_cost, 2),
            "success": True
        }
    except Exception as e:
        return {
            "error": str(e),
            "success": False
        }

# === INTERFACE PRINCIPAL ===

# Header
st.title("üîß Planejamento PM & Estoque")
st.markdown("**Otimiza√ß√£o de intervalos de manuten√ß√£o preventiva e gest√£o de pe√ßas de reposi√ß√£o**")
st.markdown("---")

# Status do Pipeline
st.subheader("üìä Status do Pipeline de Otimiza√ß√£o")
display_pipeline_status()

st.markdown("---")

# === VALIDA√á√ÉO DE PR√â-REQUISITOS ===

# 1. Dataset carregado
if st.session_state.dataset is None or st.session_state.dataset.empty:
    st.error("‚ùå **Dataset n√£o carregado**")
    
    st.markdown("""
    ### üìã **Pr√©-requisitos n√£o atendidos**
    
    Para executar o planejamento, voc√™ precisa:
    
    1. **Carregar dados** na p√°gina "Dados UNIFIED"
    2. **Executar an√°lise Weibull** na p√°gina "Ajuste Weibull UNIFIED"
    """)
    
    st.info("üëà **Pr√≥ximo passo:** Use a barra lateral para navegar at√© 'Dados UNIFIED'")
    
    if st.button("üîÑ **Ir para Dados UNIFIED**", type="primary"):
        try:
            st.switch_page("pages/1_Dados_UNIFIED.py")
        except:
            st.info("üëà Use o menu lateral para navegar")
    
    st.stop()

# 2. An√°lise Weibull executada
is_weibull_valid, weibull_message = validate_weibull_availability()

if not is_weibull_valid:
    st.error(f"‚ùå **{weibull_message}**")
    
    st.markdown("""
    ### üìã **An√°lise Weibull Pendente**
    
    Para prosseguir com o planejamento, voc√™ precisa:
    
    1. **Executar a an√°lise Weibull** na p√°gina correspondente
    2. **Garantir** que pelo menos um componente foi analisado com sucesso
    """)
    
    st.info("üëà **Pr√≥ximo passo:** Execute a an√°lise Weibull primeiro")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üìà **Ir para An√°lise Weibull**", type="primary", use_container_width=True):
            try:
                st.switch_page("pages/2_Ajuste_Weibull_UNIFIED.py")
            except:
                st.info("üëà Use o menu lateral para navegar")
    
    # Debug info
    with st.expander("üîç **Informa√ß√µes de Debug**"):
        st.write("**Dados dispon√≠veis no Session State:**")
        
        debug_items = [
            ("dataset", "Carregado" if st.session_state.get("dataset") is not None else "Ausente"),
            ("weibull_results", f"{len(st.session_state.get('weibull_results', {}))} componentes"),
            ("data_quality_report", "Dispon√≠vel" if st.session_state.get("data_quality_report") else "Ausente"),
        ]
        
        for key, value in debug_items:
            st.write(f"‚Ä¢ **{key}:** {value}")
        
        if st.session_state.get("weibull_results"):
            st.write("\n**Componentes com an√°lise Weibull:**")
            for comp in st.session_state.weibull_results.keys():
                result = st.session_state.weibull_results[comp]
                status = "‚úÖ Sucesso" if result.get("success", False) else "‚ùå Falha"
                st.write(f"  ‚Ä¢ {comp}: {status}")
    
    st.stop()

# === DADOS VALIDADOS ===
available_components = get_available_components()
st.success(f"‚úÖ **Dados Weibull dispon√≠veis** para {len(available_components)} componentes")

# === SIDEBAR - CONFIGURA√á√ïES ===
with st.sidebar:
    st.header("üéØ Configura√ß√µes de Otimiza√ß√£o")
    
    st.markdown("---")
    
    # === SELE√á√ÉO DE COMPONENTE ===
    st.subheader("üî© Componente")
    selected_component = st.selectbox(
        "Selecione o componente:",
        options=available_components,
        index=0,
        key="planning_component_selector",
        help="Escolha o componente para an√°lise detalhada"
    )
    
    # === SELE√á√ÉO DE FROTA ===
    st.subheader("üöõ Frota")
    if 'fleet' in st.session_state.dataset.columns:
        available_fleets = ["Todos"] + list(st.session_state.dataset['fleet'].unique())
        selected_fleet = st.selectbox(
            "Selecione a frota:",
            options=available_fleets,
            index=0,
            key="planning_fleet_selector",
            help="Filtre por frota espec√≠fica ou analise todas"
        )
    else:
        selected_fleet = "Todos"
        st.info("Coluna 'fleet' n√£o encontrada nos dados")
    
    # Atualiza session state
    st.session_state.selected_component = selected_component
    st.session_state.selected_fleet = selected_fleet
    
    st.markdown("---")
    
    # === PAR√ÇMETROS DE CUSTO ===
    st.subheader("üí∞ Custos de Manuten√ß√£o")
    
    cost_pm = st.number_input(
        "Custo de Manuten√ß√£o Preventiva ($):",
        min_value=0.0,
        value=1000.0,
        step=100.0,
        help="Custo para realizar uma MP planejada"
    )
    
    cost_cm = st.number_input(
        "Custo de Manuten√ß√£o Corretiva ($):",
        min_value=0.0,
        value=5000.0,
        step=100.0,
        help="Custo para realizar uma MC n√£o planejada"
    )
    
    # Raz√£o de custos
    cost_ratio = cost_cm / cost_pm if cost_pm > 0 else 0
    st.metric("Raz√£o CM/MP", f"{cost_ratio:.1f}x", help="Quantas vezes a MC √© mais cara que a MP")
    
    with st.expander("‚è±Ô∏è Custos de Parada"):
        cost_downtime_pm = st.number_input(
            "Custo de parada para MP ($/h):",
            min_value=0.0,
            value=0.0,
            step=10.0,
            help="Custo por hora de parada durante MP"
        )
        
        cost_downtime_cm = st.number_input(
            "Custo de parada para MC ($/h):",
            min_value=0.0,
            value=0.0,
            step=10.0,
            help="Custo por hora de parada durante MC"
        )
    
    st.markdown("---")
    
    # === PAR√ÇMETROS DE ESTOQUE ===
    st.subheader("üì¶ Par√¢metros de Estoque")
    
    lead_time_days = st.number_input(
        "Lead Time (dias):",
        min_value=1,
        value=30,
        step=1,
        help="Tempo entre pedido e recebimento da pe√ßa"
    )
    
    service_level = st.slider(
        "N√≠vel de Servi√ßo:",
        min_value=0.80,
        max_value=0.99,
        value=0.95,
        step=0.01,
        format="%.0f%%",
        help="Probabilidade de n√£o faltar estoque"
    )
    
    with st.expander("üí≤ Custos de Estoque"):
        unit_cost = st.number_input(
            "Custo unit√°rio da pe√ßa ($):",
            min_value=0.0,
            value=1000.0,
            step=100.0,
            help="Pre√ßo de compra de uma unidade"
        )
        
        holding_rate = st.slider(
            "Taxa de posse anual:",
            min_value=0.05,
            max_value=0.50,
            value=0.20,
            step=0.01,
            format="%.0f%%",
            help="Percentual do custo da pe√ßa para mant√™-la em estoque por ano"
        )
        
        ordering_cost = st.number_input(
            "Custo de pedido ($):",
            min_value=0.0,
            value=100.0,
            step=10.0,
            help="Custo fixo para fazer um pedido"
        )
    
    st.markdown("---")
    
    # === RESUMO DA SELE√á√ÉO ===
    st.subheader("üìã Resumo da Sele√ß√£o")
    st.write(f"**Componente:** {selected_component}")
    st.write(f"**Frota:** {selected_fleet}")
    st.write(f"**Raz√£o CM/MP:** {cost_ratio:.1f}x")
    st.write(f"**Lead Time:** {lead_time_days} dias")
    st.write(f"**N√≠vel de Servi√ßo:** {service_level:.0%}")

# === VALIDA√á√ÉO DO COMPONENTE SELECIONADO ===
is_comp_valid, comp_message = validate_weibull_availability(selected_component)
if not is_comp_valid:
    st.error(f"‚ùå {comp_message}")
    st.stop()

# === PAR√ÇMETROS WEIBULL DO COMPONENTE ===
weibull_params = st.session_state.weibull_results[selected_component]

if not weibull_params.get('success', False):
    st.error(f"‚ùå **Erro nos par√¢metros Weibull:** {weibull_params.get('error', 'Erro desconhecido')}")
    st.stop()

lambda_param = weibull_params['lambda']
rho_param = weibull_params['rho']
mtbf = weibull_params.get('MTBF') or calculate_mtbf_weibull(lambda_param, rho_param)

# === EXIBI√á√ÉO DOS PAR√ÇMETROS ===
st.subheader(f"üìä An√°lise: {selected_component} | Frota: {selected_fleet}")

col1, col2, col3, col4, col5 = st.columns(5)

with col1:
    st.metric(
        "Œª (Escala)", 
        f"{lambda_param:.2f}",
        help="Par√¢metro de escala da distribui√ß√£o Weibull"
    )

with col2:
    st.metric(
        "œÅ (Forma)", 
        f"{rho_param:.2f}",
        help="Par√¢metro de forma da distribui√ß√£o Weibull"
    )

with col3:
    st.metric(
        "MTBF", 
        f"{mtbf:.0f}h",
        help="Tempo M√©dio Entre Falhas"
    )

with col4:
    st.metric(
        "Observa√ß√µes", 
        weibull_params['n_observations'],
        help="N√∫mero de observa√ß√µes usadas no ajuste"
    )

with col5:
    if rho_param < 1:
        pattern = "üîΩ Decrescente"
        pattern_help = "Mortalidade infantil - falhas precoces"
    elif rho_param <= 1.1:
        pattern = "‚û°Ô∏è Constante"
        pattern_help = "Taxa de falha constante - falhas aleat√≥rias"
    else:
        pattern = "üìà Crescente"
        pattern_help = "Desgaste - falhas por envelhecimento"
    
    st.metric(
        "Taxa de Falha", 
        pattern,
        help=pattern_help
    )

# === OTIMIZA√á√ÉO DE MANUTEN√á√ÉO ===
st.markdown("---")
st.subheader("üéØ Otimiza√ß√£o de Intervalo de Manuten√ß√£o")

with st.spinner("üîÑ Calculando intervalo √≥timo..."):
    optimization_result = age_replacement_optimization(
        lambda_param, rho_param, cost_pm, cost_cm,
        cost_downtime_pm, cost_downtime_cm
    )

if not optimization_result.get("success", False):
    st.error(f"‚ùå **Falha na otimiza√ß√£o:** {optimization_result.get('error', 'Erro desconhecido')}")
    st.stop()

optimal_interval = optimization_result["optimal_interval"]
optimal_cost_rate = optimization_result["optimal_cost_rate"]
reliability_optimal = optimization_result["reliability_at_optimal"]

# Salva no session state
st.session_state.maintenance_strategy_Todos_Todos_Motor = {
    "policy": "Substitui√ß√£o por idade otimizada",
    "component": selected_component,
    "intervalo_h": optimal_interval,
    "cost_rate": optimal_cost_rate,
    "reliability": reliability_optimal,
    "mtbf": mtbf
}

st.success("‚úÖ **Intervalo √≥timo calculado com sucesso!**")

col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        "üéØ Intervalo √ìtimo",
        f"{optimal_interval:.0f}h",
        delta=f"{optimal_interval/24:.1f} dias",
        help="Intervalo que minimiza o custo total"
    )

with col2:
    st.metric(
        "üí∞ Taxa de Custo",
        f"${optimal_cost_rate:.2f}/h",
        help="Custo por hora de opera√ß√£o"
    )

with col3:
    st.metric(
        "üìä Confiabilidade",
        f"{reliability_optimal:.1%}",
        help="Probabilidade de n√£o falhar at√© o intervalo √≥timo"
    )

with col4:
    annual_cost = optimal_cost_rate * 8760
    st.metric(
        "üìÖ Custo Anual",
        f"${annual_cost:,.0f}",
        help="Custo estimado por ano (8760h)"
    )

# Compara√ß√£o com MTBF
st.info(f"""
üìä **An√°lise Comparativa:**
- Intervalo √≥timo √© **{(optimal_interval/mtbf):.1%}** do MTBF
- Realizar manuten√ß√£o a cada **{optimal_interval:.0f} horas** ({optimal_interval/24:.1f} dias)
- Probabilidade de falha antes da MP: **{(1-reliability_optimal):.1%}**
""")

# === AN√ÅLISE DE CEN√ÅRIOS ===
st.markdown("---")
st.subheader("üìä An√°lise de Cen√°rios Alternativos")

with st.spinner("üîÑ Gerando cen√°rios..."):
    scenarios_df = calculate_maintenance_scenarios(
        lambda_param, rho_param, cost_pm, cost_cm,
        cost_downtime_pm, cost_downtime_cm
    )

if scenarios_df.empty:
    st.error("‚ùå Falha ao gerar cen√°rios")
else:
    st.session_state.scenarios_Todos_Todos_Motor = scenarios_df
    
    st.dataframe(
        scenarios_df,
        use_container_width=True,
        hide_index=True
    )
    
    # Destaca o melhor cen√°rio
    best_scenario_idx = scenarios_df["Taxa de Custo ($/h)"].idxmin()
    best_interval = scenarios_df.loc[best_scenario_idx, "Intervalo (h)"]
    
    st.success(f"‚ú® **Melhor cen√°rio:** Intervalo de {best_interval:.0f}h")

# === GR√ÅFICO DE AN√ÅLISE ===
st.markdown("---")
st.subheader("üìà An√°lise Visual: Custo vs Intervalo")

# Prepara dados para gr√°fico
intervals_range = np.linspace(mtbf * 0.2, mtbf * 2, 50)
cost_rates = []

for interval in intervals_range:
    reliability = weibull_reliability(interval, lambda_param, rho_param)
    expected_cycle = expected_cycle_length_numerical(interval, lambda_param, rho_param)
    
    if expected_cycle > 0:
        cost_rate = ((cost_pm + cost_downtime_pm) * reliability + 
                    (cost_cm + cost_downtime_cm) * (1 - reliability)) / expected_cycle
        cost_rates.append(cost_rate)
    else:
        cost_rates.append(None)

# Cria DataFrame para gr√°fico
chart_data = pd.DataFrame({
    'Intervalo (h)': intervals_range,
    'Taxa de Custo ($/h)': cost_rates
})

st.line_chart(chart_data.set_index('Intervalo (h)'), height=400)

# Marca ponto √≥timo
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.info(f"üéØ **Ponto √≥timo:** {optimal_interval:.0f}h com taxa de ${optimal_cost_rate:.2f}/h")

# === GEST√ÉO DE ESTOQUE ===
st.markdown("---")
st.subheader("üì¶ Estrat√©gia de Gest√£o de Estoque")

lead_time_hours = lead_time_days * 24

with st.spinner("üîÑ Calculando par√¢metros de estoque..."):
    inventory_params = calculate_inventory_strategy(
        optimal_interval, lambda_param, rho_param,
        lead_time_hours, service_level, unit_cost, holding_rate, ordering_cost
    )

if not inventory_params.get("success", False):
    st.error(f"‚ùå **Falha no c√°lculo de estoque:** {inventory_params.get('error', 'Erro desconhecido')}")
else:
    st.session_state.inventory_strategy_Todos_Todos_Motor = inventory_params
    
    st.success("‚úÖ **Par√¢metros de estoque calculados com sucesso!**")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üìä Demanda Anual",
            f"{inventory_params['annual_demand']:.1f}",
            delta="pe√ßas/ano",
            help="Quantidade estimada de pe√ßas necess√°rias por ano"
        )
    
    with col2:
        st.metric(
            "üîÑ Ponto de Reposi√ß√£o",
            f"{inventory_params['reorder_point']:.0f}",
            delta="pe√ßas",
            help="Quando o estoque atingir este n√≠vel, fa√ßa um novo pedido"
        )
    
    with col3:
        st.metric(
            "üõ°Ô∏è Estoque de Seguran√ßa",
            f"{inventory_params['safety_stock']:.0f}",
            delta="pe√ßas",
            help="Quantidade m√≠nima para proteger contra varia√ß√µes"
        )
    
    with col4:
        st.metric(
            "üì¶ Lote Econ√¥mico",
            f"{inventory_params['economic_order_quantity']:.0f}",
            delta="pe√ßas",
            help="Quantidade ideal a pedir em cada pedido"
        )
    
    # Detalhes expandidos
    with st.expander("üîç **Detalhes da Estrat√©gia de Estoque**"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìä Composi√ß√£o da Demanda")
            st.write(f"‚Ä¢ **Manuten√ß√£o Preventiva:** {inventory_params['pm_demand']:.2f} pe√ßas/ano")
            st.write(f"‚Ä¢ **Manuten√ß√£o Corretiva:** {inventory_params['cm_demand']:.2f} pe√ßas/ano")
            st.write(f"‚Ä¢ **Demanda Total:** {inventory_params['annual_demand']:.2f} pe√ßas/ano")
            
            st.markdown("#### üí∞ Custos de Estoque")
            st.write(f"‚Ä¢ **Custo unit√°rio:** ${inventory_params['unit_cost']:.2f}")
            st.write(f"‚Ä¢ **Taxa de posse:** {holding_rate:.1%}/ano")
            st.write(f"‚Ä¢ **Custo anual de posse:** ${inventory_params['annual_holding_cost']:.2f}")
        
        with col2:
            st.markdown("#### üéØ Par√¢metros de Controle")
            st.write(f"‚Ä¢ **Lead Time:** {lead_time_days} dias ({lead_time_hours:.0f} horas)")
            st.write(f"‚Ä¢ **N√≠vel de Servi√ßo:** {inventory_params['service_level']:.1%}")
            st.write(f"‚Ä¢ **Demanda no Lead Time:** {inventory_params['mean_demand_lead_time']:.2f} pe√ßas")
            
            st.markdown("#### üìã Pol√≠tica Recomendada")
            st.write(f"‚Ä¢ **Quando estoque ‚â§ {inventory_params['reorder_point']:.0f}:** Fazer pedido")
            st.write(f"‚Ä¢ **Quantidade a pedir:** {inventory_params['economic_order_quantity']:.0f} pe√ßas")
            st.write(f"‚Ä¢ **Manter sempre:** {inventory_params['safety_stock']:.0f} pe√ßas de seguran√ßa")

# === RESUMO EXECUTIVO ===
st.markdown("---")
st.subheader("üìã Resumo Executivo")

col1, col2 = st.columns(2)

with col1:
    st.markdown("### üéØ **Estrat√©gia de Manuten√ß√£o Recomendada**")
    st.markdown(f"""
    **Componente Analisado:** {selected_component}  
    **Pol√≠tica:** Substitui√ß√£o por idade (Age Replacement)  
    **Intervalo √ìtimo:** {optimal_interval:.0f} horas ({optimal_interval/24:.1f} dias)  
    **Confiabilidade no Intervalo:** {reliability_optimal:.1%}  
    **Taxa de Custo:** ${optimal_cost_rate:.2f}/hora  
    **Custo Anual Estimado:** ${optimal_cost_rate * 8760:,.0f}
    
    **Interpreta√ß√£o:**  
    Realizar manuten√ß√£o preventiva a cada **{optimal_interval:.0f} horas** minimiza 
    o custo total considerando tanto custos de MP quanto de MC.
    """)

with col2:
    st.markdown("### üì¶ **Estrat√©gia de Estoque Recomendada**")
    
    if inventory_params.get("success"):
        st.markdown(f"""
        **Demanda Anual Estimada:** {inventory_params['annual_demand']:.1f} pe√ßas  
        **Ponto de Reposi√ß√£o:** {inventory_params['reorder_point']:.0f} pe√ßas  
        **Estoque de Seguran√ßa:** {inventory_params['safety_stock']:.0f} pe√ßas  
        **Lote Econ√¥mico de Compra:** {inventory_params['economic_order_quantity']:.0f} pe√ßas  
        **N√≠vel de Servi√ßo:** {inventory_params['service_level']:.0%}  
        **Custo Anual de Posse:** ${inventory_params['annual_holding_cost']:.2f}
        
        **Interpreta√ß√£o:**  
        Quando o estoque atingir **{inventory_params['reorder_point']:.0f} pe√ßas**, 
        fa√ßa um pedido de **{inventory_params['economic_order_quantity']:.0f} pe√ßas**. 
        Mantenha sempre pelo menos **{inventory_params['safety_stock']:.0f} pe√ßas** 
        como estoque de seguran√ßa.
        """)

# === EXPORTA√á√ÉO DE RESULTADOS ===
st.markdown("---")
st.subheader("üì§ Exportar Resultados")

col1, col2, col3 = st.columns(3)

with col1:
    if not scenarios_df.empty:
        csv_scenarios = scenarios_df.to_csv(index=False)
        st.download_button(
            "üìä **Baixar Cen√°rios (CSV)**",
            data=csv_scenarios,
            file_name=f"cenarios_{selected_component}_{pd.Timestamp.now().strftime('%Y%m%d')}.csv",
            mime="text/csv",
            use_container_width=True
        )

with col2:
    if st.button("üìã **Exportar Estrat√©gias (JSON)**", use_container_width=True):
        import json
        
        summary = {
            "component": selected_component,
            "fleet": selected_fleet,
            "analysis_date": pd.Timestamp.now().isoformat(),
            "weibull_parameters": {
                "lambda": lambda_param,
                "rho": rho_param,
                "mtbf": mtbf
            },
            "maintenance_strategy": st.session_state.maintenance_strategy_Todos_Todos_Motor,
            "inventory_strategy": st.session_state.inventory_strategy_Todos_Todos_Motor,
            "scenarios": scenarios_df.to_dict('records') if not scenarios_df.empty else []
        }
        
        json_str = json.dumps(summary, indent=2)
        st.download_button(
            "üíæ **Download JSON**",
            data=json_str,
            file_name=f"estrategias_{selected_component}_{pd.Timestamp.now().strftime('%Y%m%d')}.json",
            mime="application/json"
        )

with col3:
    if st.button("üîÑ **Nova An√°lise**", use_container_width=True):
        # Limpa apenas os resultados, mant√©m configura√ß√µes
        keys_to_clear = [
            'scenarios_Todos_Todos_Motor',
            'maintenance_strategy_Todos_Todos_Motor',
            'inventory_strategy_Todos_Todos_Motor'
        ]
        for key in keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()

# === INFORMA√á√ïES T√âCNICAS ===
st.markdown("---")
with st.expander("üîß **Metodologia e Informa√ß√µes T√©cnicas**"):
    st.markdown("""
    ### üìö **Metodologia Aplicada**
    
    #### **1. Distribui√ß√£o Weibull**
    A an√°lise de confiabilidade utiliza a distribui√ß√£o Weibull de dois par√¢metros:
    - **Œª (lambda)**: Par√¢metro de escala - caracteriza a vida caracter√≠stica
    - **œÅ (rho)**: Par√¢metro de forma - caracteriza o tipo de falha
    
    **Fun√ß√£o de Confiabilidade:**  

    $$R(t) = \exp\left(-\left(\frac{t}{\lambda}\right)^\rho\right)$$
    
    **MTBF (Mean Time Between Failures):**  

    $$MTBF = \lambda \times \Gamma\left(1 + \frac{1}{\rho}\right)$$
    
    #### **2. Otimiza√ß√£o de Manuten√ß√£o Preventiva**
    Utiliza a pol√≠tica de **Substitui√ß√£o por Idade (Age Replacement)**:
    
    **Fun√ß√£o Objetivo (minimizar):**  

    $$C(T) = \frac{C_{PM} \times R(T) + C_{CM} \times [1-R(T)]}{E[\min(T,X)]}$$
    
    Onde:
    - $$C_{PM}$$: Custo de manuten√ß√£o preventiva
    - $$C_{CM}$$: Custo de manuten√ß√£o corretiva
    - $$R(T)$$: Confiabilidade no intervalo T
    - $$E[\min(T,X)]$$: Dura√ß√£o esperada do ciclo
    
    **M√©todo de Otimiza√ß√£o:** Busca tern√°ria
    
    #### **3. Gest√£o de Estoque**
    Modelo **(s, S)** com estoque de seguran√ßa:
    
    **Ponto de Reposi√ß√£o:**  

    $$s = \mu_{LT} + z_\alpha \times \sigma_{LT}$$
    
    **Lote Econ√¥mico (EOQ):**  

    $$Q^* = \sqrt{\frac{2 \times D \times S}{H}}$$
    
    Onde:
    - $$\mu_{LT}$$: Demanda m√©dia durante lead time
    - $$z_\alpha$$: Z-score para n√≠vel de servi√ßo Œ±
    - $$\sigma_{LT}$$: Desvio padr√£o da demanda no lead time
    - $$D$$: Demanda anual
    - $$S$$: Custo de pedido
    - $$H$$: Custo de posse unit√°rio
    
    ### ‚ö†Ô∏è **Premissas e Limita√ß√µes**
    
    1. **Tempos de falha** seguem distribui√ß√£o Weibull
    2. **Custos** s√£o considerados constantes ao longo do tempo
    3. **Lead time** √© determin√≠stico
    4. **Uma pe√ßa por manuten√ß√£o** (propor√ß√£o 1:1)
    5. **Demanda independente** entre per√≠odos
    6. **Sistema de reposi√ß√£o cont√≠nua**
    
    ### üìñ **Refer√™ncias**
    
    - Barlow & Proschan (1965) - Mathematical Theory of Reliability
    - Nakagawa (2005) - Maintenance Theory of Reliability
    - Silver, Pyke & Peterson (1998) - Inventory Management
    """)

# === FOOTER ===
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p><em>Otimiza√ß√£o baseada em an√°lise de confiabilidade Weibull e teoria de gest√£o de opera√ß√µes</em></p>
    <p><small>Desenvolvido para suporte √† decis√£o em manuten√ß√£o industrial</small></p>
</div>
""", unsafe_allow_html=True)

# === DEBUG (OPCIONAL) ===
if st.sidebar.checkbox("üêõ **Modo Debug**"):
    st.markdown("---")
    st.subheader("üîç Informa√ß√µes de Debug")
    
    debug_tabs = st.tabs(["üìä Par√¢metros", "üîß Otimiza√ß√£o", "üì¶ Estoque", "üíæ Session"])
    
    with debug_tabs[0]:
        st.write("**Par√¢metros Weibull:**")
        st.json({
            "lambda": lambda_param,
            "rho": rho_param,
            "mtbf": mtbf,
            "n_observations": weibull_params['n_observations']
        })
    
    with debug_tabs[1]:
        st.write("**Resultado da Otimiza√ß√£o:**")
        st.json(optimization_result)
    
    with debug_tabs[2]:
        st.write("**Par√¢metros de Estoque:**")
        st.json(inventory_params)
    
    with debug_tabs[3]:
        st.write("**Session State Keys:**")
        st.write(list(st.session_state.keys()))
